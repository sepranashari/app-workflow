# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: App Workflow

on: [workflow_dispatch]

env:
  flutter_version: "${{ secrets.FLUTTER_VERSION }}"
  java_version: "12.x"

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout
        run: |
          git clone ${{ secrets.GH_ADDRESS }}
          cd ${{ secrets.MAIN_PROJECT_WORKING_DIRECTORY }}
          git config user.name "${{ secrets.GH_USER }}"
          git config user.email "${{ secrets.GH_MAIL }}"
          
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ env.java_version }}
          
      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: /Users/runner/hostedtoolcache/flutter
          key: ${{ runner.OS }}-flutter-install-cache-${{ env.flutter_version }}
      
      - uses: subosito/flutter-action@v2
        with:
          # 11
          flutter-version: ${{ env.flutter_version }}
          channel: 'stable'
  
      - name: Get dependencies
        working-directory: ${{ secrets.MAIN_PROJECT_WORKING_DIRECTORY }}
        run: flutter pub get
      
      #- name: Build app bundle
      #  working-directory: ${{ secrets.MAIN_PROJECT_WORKING_DIRECTORY }}
      #  run: flutter build appbundle
      
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
      - name: Building IPA
        working-directory: ${{ secrets.MAIN_PROJECT_WORKING_DIRECTORY }}
        run: flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist
        
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
      
